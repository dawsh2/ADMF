--- a/src/strategy/optimization/enhanced_optimizer.py
+++ b/src/strategy/optimization/enhanced_optimizer.py
@@ -10,6 +10,7 @@ from typing import Dict, Any, List, Tuple, Optional
 from src.strategy.optimization.basic_optimizer import BasicOptimizer
 from src.core.events import EventType
 from src.strategy.optimization.genetic_optimizer import GeneticOptimizer
+from src.strategy.optimization.engines import BacktestEngine
 
 logger = logging.getLogger(__name__)
 
@@ -30,6 +31,9 @@ class EnhancedOptimizer(BasicOptimizer):
         super().__init__(instance_name, config_loader, event_bus, component_config_key, container)
         # Store container reference for component resolution
         self._container = container
+        
+        # Initialize BacktestEngine for consistent backtest execution
+        self.backtest_engine = BacktestEngine(container, config_loader, event_bus)
         
         # Get configuration for top-N tracking
         self._track_top_n = self._config_loader.get(f"{self._config_key}.track_top_n", 10)
@@ -49,6 +53,15 @@ class EnhancedOptimizer(BasicOptimizer):
     
     def _perform_single_backtest_run(self, params_to_test: Dict[str, Any], dataset_type: str) -> Tuple[Optional[float], Optional[Dict[str, Dict[str, Any]]]]:
+        '''Use BacktestEngine for consistent backtest execution.'''
+        return self.backtest_engine.run_backtest(
+            parameters=params_to_test,
+            dataset_type=dataset_type,
+            strategy_type="ensemble",
+            use_regime_adaptive=False
+        )
+    
+    def _perform_single_backtest_run_OLD(self, params_to_test: Dict[str, Any], dataset_type: str) -> Tuple[Optional[float], Optional[Dict[str, Dict[str, Any]]]]:
         '''
         Perform a single backtest run with given parameters on the specified dataset.
         Returns the metric value for optimization and regime performance data.

# src/portfolio/basic_portfolio.py
import logging
import datetime
from typing import Dict, List, Any, Tuple, Optional # Ensure these are imported

from src.core.component import BaseComponent
from src.core.event import Event, EventType
from src.core.exceptions import ConfigurationError, ComponentError # If needed

class BasicPortfolio(BaseComponent):
    """
    A basic portfolio component that tracks cash, holdings, and portfolio value.
    It listens to FILL events to update positions and BAR events to mark-to-market.
    """

    def __init__(self, instance_name: str, config_loader, event_bus, component_config_key: str):
        super().__init__(instance_name, config_loader, component_config_key)
        
        self._event_bus = event_bus
        if not self._event_bus:
            self.logger.error("EventBus instance is required for BasicPortfolio.")
            raise ConfigurationError("EventBus instance is required for BasicPortfolio.")

        self._initial_cash: float = self.get_specific_config("initial_cash")
        if self._initial_cash is None or not isinstance(self._initial_cash, (int, float)) or self._initial_cash < 0:
            raise ConfigurationError(f"Portfolio '{self.name}': 'initial_cash' must be a non-negative number. Got: {self._initial_cash}")

        self._current_cash: float = self._initial_cash
        
        # Holdings: symbol -> {"quantity": float, "avg_cost_price": float, "last_market_price": float}
        self._holdings: Dict[str, Dict[str, float]] = {}
        # Market prices: symbol -> latest_close_price
        self._market_prices: Dict[str, float] = {}
        
        self._realized_pnl: float = 0.0
        self._trade_log: List[Dict[str, Any]] = []
        self._portfolio_value_history: List[Tuple[datetime.datetime, float]] = []

        self.logger.info(
            f"BasicPortfolio '{self.name}' initialized with initial cash: {self._initial_cash:.2f}"
        )

    def setup(self):
        self.logger.info(f"Setting up BasicPortfolio '{self.name}'...")
        self._current_cash = self._initial_cash # Reset cash on setup
        self._holdings.clear()
        self._market_prices.clear()
        self._realized_pnl = 0.0
        self._trade_log.clear()
        self._portfolio_value_history.clear()

        self._event_bus.subscribe(EventType.FILL, self._on_fill_event)
        self._event_bus.subscribe(EventType.BAR, self._on_bar_event) # For mark-to-market

        self.logger.info(f"'{self.name}' subscribed to FILL and BAR events.")
        self._log_portfolio_value(datetime.datetime.now(datetime.timezone.utc)) # Log initial value
        self.state = BaseComponent.STATE_INITIALIZED
        self.logger.info(f"BasicPortfolio '{self.name}' setup complete. State: {self.state}")

    def _on_fill_event(self, fill_event: Event):
        if fill_event.event_type != EventType.FILL:
            return

        fill_data = fill_event.payload
        symbol = fill_data.get("symbol")
        quantity_filled = float(fill_data.get("quantity_filled", 0))
        fill_price = float(fill_data.get("fill_price", 0))
        commission = float(fill_data.get("commission", 0))
        direction = fill_data.get("direction") # "BUY" or "SELL"
        timestamp = fill_data.get("timestamp", datetime.datetime.now(datetime.timezone.utc)) # Use fill timestamp

        if not all([symbol, quantity_filled > 0, fill_price > 0, direction]):
            self.logger.error(f"'{self.name}' received invalid FILL event data: {fill_data}")
            return

        self.logger.info(
            f"'{self.name}' processing FILL: {direction} {quantity_filled} {symbol} at {fill_price:.2f}, "
            f"Commission: {commission:.2f}"
        )

        # Update trade log
        trade_details = {**fill_data} # Copy fill data
        
        cost_of_trade = quantity_filled * fill_price
        
        if symbol not in self._holdings:
            self._holdings[symbol] = {"quantity": 0.0, "avg_cost_price": 0.0, "last_market_price": fill_price}

        current_quantity = self._holdings[symbol]["quantity"]
        current_avg_cost = self._holdings[symbol]["avg_cost_price"]

        if direction.upper() == "BUY":
            self._current_cash -= (cost_of_trade + commission)
            
            new_total_cost = (current_avg_cost * current_quantity) + cost_of_trade
            new_quantity = current_quantity + quantity_filled
            self._holdings[symbol]["quantity"] = new_quantity
            if new_quantity > 0: # Avoid division by zero if somehow quantity is 0
                 self._holdings[symbol]["avg_cost_price"] = new_total_cost / new_quantity
            else: # Should not happen for a BUY if starting from 0 or positive
                 self._holdings[symbol]["avg_cost_price"] = 0.0


        elif direction.upper() == "SELL":
            self._current_cash += (cost_of_trade - commission)
            
            # Realized P&L calculation
            # For simplicity, assuming FIFO or average cost. Using average cost here.
            if current_quantity > 0: # Ensure there's something to sell
                cost_of_sold_shares = current_avg_cost * quantity_filled
                pnl_this_trade = cost_of_trade - cost_of_sold_shares - commission # Revenue - Cost - Commission
                self._realized_pnl += pnl_this_trade
                trade_details["realized_pnl"] = pnl_this_trade
                self.logger.info(f"Realized P&L from sell of {quantity_filled} {symbol}: {pnl_this_trade:.2f}")
            
            self._holdings[symbol]["quantity"] -= quantity_filled
            if self._holdings[symbol]["quantity"] == 0:
                # Position closed, can reset avg_cost_price or remove symbol if preferred
                self._holdings[symbol]["avg_cost_price"] = 0.0 
                # or del self._holdings[symbol] if no re-entry is expected or to clean up

        else:
            self.logger.warning(f"Unknown direction '{direction}' in FILL event for {self.name}.")
            return
            
        self._holdings[symbol]["last_market_price"] = fill_price # Update last known price from fill
        self._trade_log.append(trade_details)
        self._update_and_log_portfolio_value(timestamp)


    def _on_bar_event(self, bar_event: Event):
        if bar_event.event_type != EventType.BAR:
            return
        
        bar_data = bar_event.payload
        symbol = bar_data.get("symbol")
        close_price = bar_data.get("close")

        if not symbol or close_price is None:
            return # Ignore BAR events without symbol or close price

        self._market_prices[symbol] = float(close_price) # Store latest market price

        # Update last_market_price for any existing holdings for this symbol
        if symbol in self._holdings and self._holdings[symbol]["quantity"] != 0:
            self._holdings[symbol]["last_market_price"] = float(close_price)
            # Update portfolio value based on this new bar price
            self._update_and_log_portfolio_value(bar_data.get("timestamp"))


    def _update_and_log_portfolio_value(self, timestamp: datetime.datetime):
        current_positions_value = 0.0
        for symbol, data in self._holdings.items():
            quantity = data.get("quantity", 0.0)
            # Use last_market_price from holdings, which is updated by BAR or FILL
            market_price = data.get("last_market_price", self._market_prices.get(symbol, 0.0)) 
            current_positions_value += quantity * market_price

        total_value = self._current_cash + current_positions_value
        
        if timestamp is None: # Fallback if timestamp is missing
            timestamp = datetime.datetime.now(datetime.timezone.utc)

        self._portfolio_value_history.append((timestamp, total_value))
        
        # Log portfolio value - maybe not every single time for BAR events
        # For now, we log it. Could add a throttle later.
        self.logger.info(
            f"Portfolio Update at {timestamp}: Cash={self._current_cash:.2f}, "
            f"Positions Value={current_positions_value:.2f}, Total Value={total_value:.2f}, "
            f"Realized PnL={self._realized_pnl:.2f}"
        )

    def start(self):
        if self.state != BaseComponent.STATE_INITIALIZED:
            self.logger.warning(f"Cannot start {self.name} from state '{self.state}'. Expected INITIALIZED.")
            return
        self.logger.info(f"{self.name} started. Monitoring FILL and BAR events...")
        self.state = BaseComponent.STATE_STARTED

    def stop(self):
        self.logger.info(f"Stopping {self.name}...")
        if self._event_bus:
            try:
                self._event_bus.unsubscribe(EventType.FILL, self._on_fill_event)
                self._event_bus.unsubscribe(EventType.BAR, self._on_bar_event)
                self.logger.info(f"'{self.name}' attempted to unsubscribe from FILL and BAR events.")
            except Exception as e:
                self.logger.error(f"Error unsubscribing '{self.name}': {e}")
        
        # Final portfolio valuation and summary
        if self._portfolio_value_history:
            final_timestamp, final_value = self._portfolio_value_history[-1]
            self._update_and_log_portfolio_value(final_timestamp) # Log final value one last time
        else: # If no events occurred, log initial cash as final
            self._update_and_log_portfolio_value(datetime.datetime.now(datetime.timezone.utc))


        self.logger.info(f"--- {self.name} Final Summary ---")
        self.logger.info(f"Initial Cash: {self._initial_cash:.2f}")
        self.logger.info(f"Final Cash: {self._current_cash:.2f}")
        self.logger.info(f"Final Holdings: {self._holdings}")
        if self._portfolio_value_history:
            self.logger.info(f"Final Portfolio Value: {self._portfolio_value_history[-1][1]:.2f}")
        self.logger.info(f"Total Realized P&L: {self._realized_pnl:.2f}")
        self.logger.info(f"Number of Trades Logged: {len(self._trade_log)}")
        # Could print self._trade_log if small or save to a file

        self.state = BaseComponent.STATE_STOPPED
        self.logger.info(f"{self.name} stopped. State: {self.state}")

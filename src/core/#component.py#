# src/core/component.py
import logging
from abc import ABC, abstractmethod
from typing import Any, TYPE_CHECKING # For type hinting SimpleConfigLoader

if TYPE_CHECKING: # Avoid circular import for type hinting
    from .config import SimpleConfigLoader

class BaseComponent(ABC):
    """
    Abstract base class for all components in the ADMF-Trader system.
    Defines a common interface and basic lifecycle management.
    """
    STATE_CREATED = "CREATED"
    STATE_INITIALIZED = "INITIALIZED"
    STATE_STARTED = "STARTED"
    STATE_STOPPED = "STOPPED"
    STATE_FAILED = "FAILED"

    def __init__(self, 
                 instance_name: str, 
                 config_loader: 'SimpleConfigLoader', # Use type hint
                 component_config_key: str = None):
        """
        Initializes the BaseComponent.

        Args:
            instance_name (str): The unique name of this component instance.
            config_loader (SimpleConfigLoader): The application's configuration loader instance.
            component_config_key (str, optional): The key within the global configuration
                                                 that holds settings specific to this component.
                                                 Example: "components.data_handler".
        """
        self.name = instance_name # Public name for the component instance
        self._config_loader = config_loader 
        self._component_config_key = component_config_key
        
        # Set up a dedicated logger for each component instance
        self.logger = logging.getLogger(f"component.{self.name}") 
        self.state = BaseComponent.STATE_CREATED
        
        self.component_specific_config: dict = {}
        if self._component_config_key:
            if self._config_loader: # Ensure config_loader is provided
                self.component_specific_config = self._config_loader.get_section(self._component_config_key)
                if not self.component_specific_config:
                    self.logger.warning(
                        f"No specific configuration found for key '{self._component_config_key}' "
                        f"for component '{self.name}'. Using empty config."
                    )
            else:
                self.logger.warning(
                    f"ConfigLoader not provided to component '{self.name}', "
                    f"cannot load specific config for key '{self._component_config_key}'."
                )
        
        self.logger.info(f"Component '{self.name}' created. State: {self.state}")

    def get_specific_config(self, key: str, default: Any = None) -> Any:
        """
        Gets a configuration value from this component's specific configuration section.
        """
        return self.component_specific_config.get(key, default)

    @abstractmethod
    def setup(self):
        """
        Performs one-time setup for the component.
        Should transition state to INITIALIZED or FAILED.
        """
        self.logger.info(f"Setting up component '{self.name}'...")
        # Subclasses implement setup and set self.state
        pass

    @abstractmethod
    def start(self):
        """
        Starts the component's main operations.
        Should only be called when the component is INITIALIZED.
        Should transition state to STARTED or FAILED.
        """
        self.logger.info(f"Starting component '{self.name}'...")

        # Subclasses implement start and set self.state
        pass

    @abstractmethod
    def stop(self):
        """
        Stops the component's operations and performs cleanup.
        Should transition state to STOPPED.
        """
        self.logger.info(f"Stopping component '{self.name}'...")
        # Subclasses implement stop and set self.state
        pass
    
    def get_state(self) -> str:
        """Returns the current state of the component."""
        return self.state

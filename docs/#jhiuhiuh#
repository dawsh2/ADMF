# ADMF-Trader System Architecture Overview

## System Architecture

The ADMF-Trader system follows a modular architecture with well-defined boundaries between components:

```
ADMF-Trader
├── Core Module - Foundational infrastructure services
├── Data Module - Market data handling and processing
├── Strategy Module - Trading strategy implementation
├── Risk Module - Risk management and portfolio tracking
├── Execution Module - Order execution and brokerage
└── Analytics Module - Performance analysis and reporting
```

The system supports multiple execution modes:
- **Backtesting**: Historical simulation in single-threaded mode
- **Optimization**: Multiple backtest instances running in parallel
- **Live Trading**: Real-time market data processing and trade execution

## Architectural Principles

1. **Component-Based Design**: The system is built from loosely coupled components with standardized interfaces
2. **Interface-Based Module Boundaries**: Modules interact through well-defined interfaces
3. **Dependency Inversion**: High-level modules depend on abstractions, not concrete implementations
4. **Hierarchical Dependency Direction**: Strict dependency hierarchy between modules (Core → Data → Strategy → Risk → Execution → Analytics)
5. **Context-Aware Thread Safety**: Thread safety mechanisms adapt based on execution context
6. **Event-Driven Communication**: Components communicate via a standardized event system
7. **Structured Error Handling**: Comprehensive error handling with recovery mechanisms
8. **Performance Optimization**: Strategic caching and incremental calculations

## Module Dependency Rules

The system enforces a strict dependency hierarchy:

```
Core ◄── Data ◄── Strategy ◄── Risk ◄── Execution ◄── Analytics
```

Rules:
- Lower-level modules cannot depend on higher-level ones
- Core only depends on external libraries
- Each level can depend on itself and levels below it
- Analytics can depend on any module

## Component Lifecycle

All components follow a standardized lifecycle:

1. **Construction**: Initialize with name and parameters
2. **Initialization**: Set up dependencies via context
3. **Start**: Begin component operation
4. **Stop**: Pause operation while preserving state
5. **Reset**: Clear state for new runs while maintaining configuration
6. **Teardown**: Release resources and unsubscribe from events

## Event Flow

The standard event flow for trading operations:

```
BAR → SIGNAL → ORDER → FILL → PORTFOLIO_UPDATE
```

Each event represents a stage in the trading process:
- **BAR**: New market data bar received
- **SIGNAL**: Trading signal generated by strategy
- **ORDER**: Order created from signal after risk checks
- **FILL**: Order execution confirmation
- **PORTFOLIO_UPDATE**: Portfolio state updated after fill

## Execution Contexts

Event isolation is maintained between execution contexts:
- Each backtest/optimization run operates in its own isolated event context
- Events from one context cannot leak into another
- Proper state reset between runs prevents data leakage

## Trade Flow Example

```
┌─ Data Module ──┐     ┌─ Strategy Module ─┐     ┌─ Risk Module ──┐     ┌─ Execution Module ─┐
│                │     │                   │     │                │     │                    │
│  DataHandler   │     │     Strategy      │     │  RiskManager   │     │      Broker        │
│                │     │                   │     │                │     │                    │
└───────┬────────┘     └────────┬─────────┘     └────────┬───────┘     └─────────┬──────────┘
        │                       │                        │                        │
        │       BAR Event       │                        │                        │
        ├──────────────────────►│                        │                        │
        │                       │                        │                        │
        │                       │      SIGNAL Event      │                        │
        │                       ├───────────────────────►│                        │
        │                       │                        │                        │
        │                       │                        │      ORDER Event       │
        │                       │                        ├───────────────────────►│
        │                       │                        │                        │
        │                       │                        │       FILL Event       │
        │                       │                        │◄───────────────────────┤
        │                       │                        │                        │
```